{
  "name": "Only.js Selector-based Loader",
  "tagline": "Automatically load and execute selector-based dependencies",
  "body": "# Only.js (A Selector-based Loader)\r\n\r\n-----\r\nThis branch is based on LABjs 2.x\r\n-----\r\n\r\nOnly.js is a dynamic script loader intended to replace the use of the ugly, non-performant &lt;script> tag with a flexible and performance-optimized alternative API.\r\n\r\nThe defining characteristic of Only.js is the ability to load *all* JavaScript files in parallel, as fast as the browser will allow, but giving you the option to ensure proper execution order if you have dependencies between files.\r\n\r\nFor instance, the following \"`<script>` tag soup\":\r\n\r\n```html\r\n<script src=\"http://remote.tld/jquery.js\"></script>\r\n<script src=\"local/plugin1.jquery.js\"></script>\r\n<script src=\"local/plugin2.jquery.js\"></script>\r\n<script src=\"local/init.js\"></script>\r\n<script>\r\n\tinitMyPage();\r\n</script>\r\n```\r\n\r\nWith Only.js becomes:\r\n\r\n```html\r\n<script src=\"Only.min.js\"></script>\r\n<script>\r\n  $O\r\n  .js(\"http://remote.tld/jquery.js\").wait()\r\n  .js(\"/local/plugin1.jquery.js\")\r\n  .js(\"/local/plugin2.jquery.js\").wait()\r\n  .js(\"/local/init.js\").wait(function(){\r\n      initMyPage();\r\n  });\r\n</script>\r\n```\r\n\r\nThe differences between the two snippets is that with regular &lt;script> tags, you cannot control their loading and executing behavior reliably cross-browser. Some new browsers will load them in parallel but execute them serially, delaying execution of a smaller (quicker loading) script in the pessimistic assumption of dependency on previous scripts. Older browsers will load *and* execute them one-at-a-time, completely losing any parallel loading speed optimizations and slowing the whole process drastically.\r\n\r\nAll browsers will, however, block other page resources (like stylesheets, images, etc) while these scripts are loading, which causes the rest of the page's content loading to appear much more sluggish to the user.\r\n\r\nOnly.js by contrast will load ALL the scripts in parallel, and will execute them as soon as possible, unless you express an execution order dependency in the chain by inserting .wait(). In addition, you can \"couple\" inline script logic to execute in the proper order in your chain as desired by passing a function to .wait(...).\r\n\r\nIt's important to realize that explicitly, separate $O chains operate completely independently, meaning there will be no explicit waiting for execution order between them. \r\n\r\nNOTE: JavaScript execution is always still a single-threaded, first-come-first-served environment. Also, some browsers use internal loading queues which create implicit \"blocking\" on script execution between separate chains. Also, the 'allowDuplicates:false' config option will de-duplicate across chains, meaning chain B can be made to implicitly \"wait\" on chain A if chain B references a same script URL as chain A, and that script is still downloading.\r\n\r\n\r\n## Build Process\r\n\r\nThere is no \"official\" build process or script. There is however \"BUILD.md\" which lists the steps that I take to prepare the LAB.min.js and LAB-debug.min.js files.\r\n\r\n\r\n## Configuration\r\n\r\nThere are a number of configuration options which can be specified either globally (for all $O chains on the page) or per chain.\r\n\r\nFor instance:\r\n\r\n```js\r\n$O.setGlobalDefaults({alwaysPreserveOrder:true});\r\n```\r\n\r\nwould tell all $O chains to insert an implicit .wait() call in between each .js() call. The behavior is identical to if you just put the .wait() call in yourself.\r\n\r\n```js\r\n$O.setOptions({alwaysPreserveOrder:true}).js(...)...\r\n```\r\n\r\nwould tell just this particular $O chain to do the same.\r\n\r\nThe configuration options available are:\r\n\r\n* `useLocalXHR`: true/false (default true): use XHR to preload scripts from local (same-domain) locations\r\n* `alwaysPreserveOrder`: true/false (default false): whether to insert an implicit .wait() call after each script load request... if turned on, prevents immediate execution of loaded files and instead executes all scripts in order\r\n* `allowDuplicates`: true/false (default true): whether to inspect the current page and $O loading cache to see if the same script URL has already been requested and allow (true) or ignore (false) if so. NOTE: in v1.2.0 and before, this didn't work correctly across multiple $O chains, but as of v2.0, it works correctly.\r\n* `cacheBust`: true/false (default false): adds a cache-busting parameter (random number) to the end of a script URL\r\n* `basePath`: {string} (default \"\"): a path string to prepend to every script request's URL\r\n\r\n\r\n## Protocol-relative URLs\r\n\r\nBrowsers have long supported \"protocol-relative URLs\", which basically means leaving off the \"http:\" or \"https:\" portion of a URL (leaving just the \"//domain.tld/path/...\" part), which causes that URL to be assumed to be the same protocol as the parent page. The benefit is that if you have a page that can be viewed in either HTTP or HTTPS, and your resources can (and need to be) served through either HTTP or HTTPS, respectively, you can simply list your URLs as protocol-relative and the browser will auto-select based on which protocol the page is viewed in.\r\n\r\nOnly.js now supports specifying such URLs to any script URL setting. NOTE: This is the recommended way to specify URLs for script resources if: a) the page you're serving can be viewed in both HTTP and HTTPS; and b) the script resource you're linking to can be accessed using the exact same domain/path with exception to the protocol. \r\n\r\nA common example of such a resource is the CDN locations on the Google Ajax API, where popular frameworks like jQuery and Dojo are hosted. If you are linking to such CDN resources, you are strongly encouraged to change to using protocol-relative URLs, like \"//ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js\" instead of \"http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js\" or \"https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js\".\r\n\r\n\r\n## New in v3.0\r\n\r\n* Support for the new `<link rel=preload>` capabilities coming soon to modern browsers.\r\n* ...\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}